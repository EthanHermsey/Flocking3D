
uniform sampler2D source[2];
uniform float radius;
uniform float delta;
uniform float perceptionRadius;
uniform float maxSpeed;
uniform float maxForce;
uniform float alignStrength;
uniform float separateStrength;
uniform float cohereStrength;

varying vec2 vUv;

vec3 limit(in vec3 acc, in float max){
    if (length(acc) > max){
        return normalize(acc) * max;
    }
    return acc;
}

vec3 align(in vec3 acc, in vec3 vel, in float count){
    
    acc /= count;
    acc = normalize(acc) * maxSpeed;
    acc -= vel;
    acc = limit(acc, maxForce);

    return acc;
}

vec3 separate(in vec3 acc, in vec3 vel, in float count){
    
    acc /= count;
    acc = normalize(acc) * maxSpeed;
    acc -= vel;
    acc = limit(acc, maxForce);
        
    return acc;
}

vec3 cohere(in vec3 acc, in vec3 pos, in vec3 vel, in float count){

    acc /= count;
    acc -= pos;
    acc = normalize(acc) * maxSpeed;
    acc -= vel;
    acc = limit(acc, maxForce);
        
    return acc;
}

vec3 flock(in vec3 pos, in vec3 vel){
    
    vec3 acc = vec3(0.0, 0.0, 0.0);
    vec3 alignacc = vec3(0.0, 0.0, 0.0);
    vec3 separateacc = vec3(0.0, 0.0, 0.0);
    vec3 cohereacc = vec3(0.0, 0.0, 0.0);

    float cohereCount = 0.0;
    float count = 0.0;
    float pixelSize = 1.0 / #DIM#;

    for (float x = 0.0; x < #DIM#; x += 1.0){
        for (float y = 0.0; y < #DIM#; y += 1.0){
            
            vec2 nUv = vec2(x * pixelSize, y * pixelSize);
            vec3 nPos = texture2D( source[0], nUv ).rgb;
            vec3 nVel = texture2D( source[1], nUv ).rgb;
            float d = distance(pos, nPos);
            float dia = radius * 2.0;

            if (d > 0.0){ 
                if (d < perceptionRadius * 2.0){
                    cohereacc += nPos;
                    cohereCount += 1.0;

                } else if (d > dia - perceptionRadius * 2.0){
                    cohereacc += nPos * -(radius/length(nPos));
                    cohereCount += 1.0;
                }

                if (d < perceptionRadius){
                    vec3 diff = vec3(pos) - nPos;
                    diff /= d*d;
                    separateacc += diff;

                    alignacc += nVel;
                    
                    count += 1.0;

                } else if (d > dia - perceptionRadius){
                    vec3 diff = vec3(pos) - nPos * -(radius/length(nPos));
                    diff /= d*d;
                    separateacc += diff;

                    alignacc += nVel;

                    count += 1.0;
                }
            }
        }
    }

    if (count > 0.0){
        acc += align(alignacc, vel, count) * alignStrength;
        acc += separate(separateacc, vel, count) * separateStrength;
        acc += cohere(cohereacc, pos, vel, cohereCount) * cohereStrength;
    }

    return acc;
}

void main() {
    vec3 pos = texture2D( source[0], vUv ).rgb;
    vec3 vel = texture2D( source[1], vUv ).rgb;

    vec3 acceleration = flock(pos, vel);

    gl_FragColor = vec4(acceleration, 1.0);
    
}